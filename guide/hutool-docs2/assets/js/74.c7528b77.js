(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{402:function(t,l,e){"use strict";e.r(l);var v=e(7),_=Object(v.a)({},(function(){var t=this,l=t._self._c;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h2",{attrs:{id:"来源"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[t._v("#")]),t._v(" 来源")]),t._v(" "),l("p",[t._v("最早此工具类中的方法是在CollUtil中的，由于经过抽象，因此单独拿出来以适应更广的场景。")]),t._v(" "),l("h2",{attrs:{id:"方法介绍"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#方法介绍"}},[t._v("#")]),t._v(" 方法介绍")]),t._v(" "),l("ul",[l("li",[l("code",[t._v("isEmpty")]),t._v(" 是否为null或者无元素")]),t._v(" "),l("li",[l("code",[t._v("isNotEmpty")]),t._v(" 是否为非null或者至少有一个元素")]),t._v(" "),l("li",[l("code",[t._v("hasNull")]),t._v(" 是否有null元素")]),t._v(" "),l("li",[l("code",[t._v("isAllNull")]),t._v(" 是否全部为null元素")]),t._v(" "),l("li",[l("code",[t._v("countMap")]),t._v(" 根据集合返回一个元素计数的Map，所谓元素计数就是假如这个集合中某个元素出现了n次，那将这个元素做为key，n做为value")]),t._v(" "),l("li",[l("code",[t._v("join")]),t._v(" 使用分隔符将集合转换为字符串")]),t._v(" "),l("li",[l("code",[t._v("toMap")]),t._v(" 将Entry列表转为Map，或者将key列表和value列表合并为Map")]),t._v(" "),l("li",[l("code",[t._v("asIterator")]),t._v(" Enumeration转Iterator")]),t._v(" "),l("li",[l("code",[t._v("asIterable")]),t._v(" Iterator转Iterable")]),t._v(" "),l("li",[l("code",[t._v("getFirst")]),t._v(" 获取列表的第一个元素")]),t._v(" "),l("li",[l("code",[t._v("getElementType")]),t._v(" 获取元素类型")])])])}),[],!1,null,null,null);l.default=_.exports}}]);