(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{359:function(v,_,a){"use strict";a.r(_);var s=a(7),e=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),_("p",[_("code",[v._v("HashUtil")]),v._v("其实是一个hash算法的集合，此工具类中融合了各种hash算法。")]),v._v(" "),_("h2",{attrs:{id:"方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[v._v("#")]),v._v(" 方法")]),v._v(" "),_("p",[v._v("这些算法包括：")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("additiveHash")]),v._v(" 加法hash")]),v._v(" "),_("li",[_("code",[v._v("rotatingHash")]),v._v(" 旋转hash")]),v._v(" "),_("li",[_("code",[v._v("oneByOneHash")]),v._v(" 一次一个hash")]),v._v(" "),_("li",[_("code",[v._v("bernstein")]),v._v(" Bernstein's hash")]),v._v(" "),_("li",[_("code",[v._v("universal")]),v._v(" Universal Hashing")]),v._v(" "),_("li",[_("code",[v._v("zobrist")]),v._v(" Zobrist Hashing")]),v._v(" "),_("li",[_("code",[v._v("fnvHash")]),v._v(" 改进的32位FNV算法")]),v._v(" "),_("li",[_("code",[v._v("intHash")]),v._v(" Thomas Wang的算法，整数hash")]),v._v(" "),_("li",[_("code",[v._v("rsHash")]),v._v(" RS算法hash")]),v._v(" "),_("li",[_("code",[v._v("jsHash")]),v._v(" JS算法")]),v._v(" "),_("li",[_("code",[v._v("pjwHash")]),v._v(" PJW算法")]),v._v(" "),_("li",[_("code",[v._v("elfHash")]),v._v(" ELF算法")]),v._v(" "),_("li",[_("code",[v._v("bkdrHash")]),v._v(" BKDR算法")]),v._v(" "),_("li",[_("code",[v._v("sdbmHash")]),v._v(" SDBM算法")]),v._v(" "),_("li",[_("code",[v._v("djbHash")]),v._v(" DJB算法")]),v._v(" "),_("li",[_("code",[v._v("dekHash")]),v._v(" DEK算法")]),v._v(" "),_("li",[_("code",[v._v("apHash")]),v._v(" AP算法")]),v._v(" "),_("li",[_("code",[v._v("tianlHash")]),v._v(" TianL Hash算法")]),v._v(" "),_("li",[_("code",[v._v("javaDefaultHash")]),v._v(" JAVA自己带的算法")]),v._v(" "),_("li",[_("code",[v._v("mixHash")]),v._v(" 混合hash算法，输出64位的值")])])])}),[],!1,null,null,null);_.default=e.exports}}]);