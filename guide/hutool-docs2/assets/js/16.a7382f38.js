(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{343:function(t,e,a){"use strict";a.r(e);var s=a(7),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"由来"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#由来"}},[t._v("#")]),t._v(" 由来")]),t._v(" "),e("p",[t._v("IO工具类的存在主要针对InputStream、OutputStream、Reader、Writer封装简化，并对NIO相关操作做封装简化。总体来说，Hutool对IO的封装，主要是工具层面，我们努力做到在便捷、性能和灵活之间找到最好的平衡点。")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("h3",{attrs:{id:"拷贝"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拷贝"}},[t._v("#")]),t._v(" 拷贝")]),t._v(" "),e("p",[t._v("流的读写可以总结为从输入流读取，从输出流写出，这个过程我们定义为"),e("strong",[t._v("拷贝")]),t._v("。这是一个基本过程，也是文件、流操作的基础。")]),t._v(" "),e("p",[t._v("以文件流拷贝为例：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedInputStream")]),t._v(" in "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileUtil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d:/test.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedOutputStream")]),t._v(" out "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileUtil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOutputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"d:/test2.txt"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" copySize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoUtil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("copy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IoUtil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DEFAULT_BUFFER_SIZE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("copy方法同样针对Reader、Writer、Channel等对象有一些重载方法，并提供可选的缓存大小。默认的，缓存大小为"),e("code",[t._v("1024")]),t._v("个字节，如果拷贝大文件或流数据较大，可以适当调整这个参数。")]),t._v(" "),e("p",[t._v("针对NIO，提供了"),e("code",[t._v("copyByNIO")]),t._v("方法，以便和BIO有所区别。我查阅过一些资料，使用NIO对文件流的操作有一定的提升，我并没有做具体实验。相关测试请参阅博客："),e("a",{attrs:{href:"http://www.cnblogs.com/gaopeng527/p/4896783.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.cnblogs.com/gaopeng527/p/4896783.html"),e("OutboundLink")],1)]),t._v(" "),e("h3",{attrs:{id:"stream转reader、writer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream转reader、writer"}},[t._v("#")]),t._v(" Stream转Reader、Writer")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("IoUtil.getReader")]),t._v("：将"),e("code",[t._v("InputStream")]),t._v("转为"),e("code",[t._v("BufferedReader")]),t._v("用于读取字符流，它是部分readXXX方法的基础。")]),t._v(" "),e("li",[e("code",[t._v("IoUtil.getWriter")]),t._v("：将"),e("code",[t._v("OutputStream")]),t._v("转为"),e("code",[t._v("OutputStreamWriter")]),t._v("用于写入字符流，它是部分writeXXX的基础。")])]),t._v(" "),e("p",[t._v("本质上这两个方法只是简单new一个新的Reader或者Writer对象，但是封装为工具方法配合IDE的自动提示可以大大减少查阅次数（例如你对BufferedReader、OutputStreamWriter不熟悉，是不是需要搜索一下相关类？）")]),t._v(" "),e("h3",{attrs:{id:"读取流中的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取流中的内容"}},[t._v("#")]),t._v(" 读取流中的内容")]),t._v(" "),e("p",[t._v("读取流中的内容总结下来，可以分为read方法和readXXX方法。")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("read")]),t._v("方法有诸多的重载方法，根据参数不同，可以读取不同对象中的内容，这包括：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("InputStream")])]),t._v(" "),e("li",[e("code",[t._v("Reader")])]),t._v(" "),e("li",[e("code",[t._v("FileChannel")])])]),t._v(" "),e("p",[t._v("这三个重载大部分返回String字符串，为字符流读取提供极大便利。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("code",[t._v("readXXX")]),t._v("方法主要针对返回值做一些处理，例如：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("readBytes")]),t._v(" 返回byte数组（读取图片等）")]),t._v(" "),e("li",[e("code",[t._v("readHex")]),t._v(" 读取16进制字符串")]),t._v(" "),e("li",[e("code",[t._v("readObj")]),t._v(" 读取序列化对象（反序列化）")]),t._v(" "),e("li",[e("code",[t._v("readLines")]),t._v(" 按行读取")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[e("code",[t._v("toStream")]),t._v("方法则是将某些对象转换为流对象，便于在某些情况下操作：")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("String")]),t._v(" 转换为"),e("code",[t._v("ByteArrayInputStream")])]),t._v(" "),e("li",[e("code",[t._v("File")]),t._v(" 转换为"),e("code",[t._v("FileInputStream")])])]),t._v(" "),e("h3",{attrs:{id:"写入到流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写入到流"}},[t._v("#")]),t._v(" 写入到流")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("IoUtil.write")]),t._v("方法有两个重载方法，一个直接调用"),e("code",[t._v("OutputStream.write")]),t._v("方法，另一个用于将对象转换为字符串（调用toString方法），然后写入到流中。")]),t._v(" "),e("li",[e("code",[t._v("IoUtil.writeObjects")]),t._v(" 用于将可序列化对象序列化后写入到流中。")])]),t._v(" "),e("p",[e("code",[t._v("write")]),t._v("方法并没有提供writeXXX，需要自己转换为String或byte[]。")]),t._v(" "),e("h3",{attrs:{id:"关闭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关闭"}},[t._v("#")]),t._v(" 关闭")]),t._v(" "),e("p",[t._v("对于IO操作来说，使用频率最高（也是最容易被遗忘）的就是"),e("code",[t._v("close")]),t._v("操作，好在Java规范使用了优雅的"),e("code",[t._v("Closeable")]),t._v("接口，这样我们只需简单封装调用此接口的方法即可。")]),t._v(" "),e("p",[t._v("关闭操作会面临两个问题：")]),t._v(" "),e("ol",[e("li",[t._v("被关闭对象为空")]),t._v(" "),e("li",[t._v("对象关闭失败（或对象已关闭）")])]),t._v(" "),e("p",[e("code",[t._v("IoUtil.close")]),t._v("方法很好的解决了这两个问题。")]),t._v(" "),e("p",[t._v("在JDK1.7中，提供了"),e("code",[t._v("AutoCloseable")]),t._v("接口，在"),e("code",[t._v("IoUtil")]),t._v("中同样提供相应的重载方法，在使用中并不会感觉到有哪些不同。")])])}),[],!1,null,null,null);e.default=r.exports}}]);